/**
 * 数组插入试效率比较低
 * 数组查找(基于下标索引效率很高;基于内容查找效率很低)
 * 数组删除效率也是很低
 */

 /**
  * 哈希表：基于数组实现的，相对于数组有很多优势
  * 提供快速的插入-删除-查找操作
  * 无论多少数据，插入和删除值需要接近常量的时间：即 O(1) 的时间级
  * 哈希表的速度比树还快且相对于树编码容易得多
  * 哈希表相对数组的不足：
  * 哈希表中的数据是没有顺序的，不能以一种固定的方式遍历
  * 通常情况下，哈希表中的 key 是不允许重复的，不能放置相同的 key，用于保存不同的元素
  */

// 哈希化：将大数字转化为数组范围内下标的过程，称之为哈希化

// 哈希函数：通常我们会将单词转成大数字，大数字在进行哈希化的代码实现放在一个函数中，这个函数叫做哈希函数

// 哈希表：最终将数据插入到的这个数组，对整个结构的封装，我们就称之为一个哈希表

// 哈希化之后产生冲突的解决方案：
// 1.链地址法(拉链法)
// 链方法解决冲突的办法是没饿过数组单元中存储的不再是单个数据，而是一个链条(数组或者链表)
// 查询时根据哈希化后的下标值找到对应的值，再取出链表，依次查询找到寻找的数据


// 2.开放地址法
// 三种探索位置：线性探测、二次探测、再哈希法